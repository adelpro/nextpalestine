import { Body, Controller, Get, HttpCode, HttpStatus, Post, Res, UseGuards } from '@nestjs/common';
import { AuthenticatedUser } from '@/auth/types/authenticatedUser.type';
import { CurrentUser } from '@/auth/decorators/currentUser.decorator';
import { Fingerprint } from '@/auth/decorators/fingerprint.decorator';
import { FingerprintObj } from '@/auth/types/fingerprint.type';
import { ApiOperation, ApiResponse } from '@nestjs/swagger';
import { JWTAuthGuard } from '@/auth/guards/jwt.guard';
import { AuthService } from '@/auth/auth.service';
import { TwoFAService } from './two-fa.service';
import { ConfigService } from '@nestjs/config';
import { Response } from 'express';

@Controller('twofa')
@UseGuards(JWTAuthGuard)
export class twoFAController {
  constructor(
    readonly twoFAService: TwoFAService,
    readonly configService: ConfigService,
    private authService: AuthService,
  ) {}

  @Get('/enable')
  @ApiOperation({ summary: 'generate qrcode with 2fa secret' })
  @ApiResponse({
    status: 200,
    description: 'Send a qrcode with 2fa secret',
  })
  @HttpCode(HttpStatus.OK)
  async enableTwoFA(@CurrentUser() currentUser: AuthenticatedUser): Promise<{ qrcode: string | null }> {
    const qrcode = await this.twoFAService.generateQRCode(currentUser.id);
    return { qrcode };
  }

  @Post('/verify')
  @ApiOperation({ summary: 'Verify 2FA' })
  @ApiResponse({
    status: 200,
    description: 'Verify 2FA using TOTP generated by authenticator',
  })
  @HttpCode(HttpStatus.OK)
  async verifyTwoFA(
    @CurrentUser() currentUser: AuthenticatedUser,
    @Fingerprint() fingerprint: FingerprintObj,
    @Body() body: { TOTP: string },
    @Res() response: Response,
  ): Promise<Response<{ message: string }>> {
    const { TOTP } = body;
    const { message, cookieToken } = await this.twoFAService.enableTwoFA({
      currentUserId: currentUser.id,
      TOTP,
      fingerprint,
    });
    return response.status(HttpStatus.OK).cookie('token', cookieToken).json({ message });
  }

  @Get('/disable')
  @ApiOperation({ summary: 'Disable 2FA' })
  @ApiResponse({
    status: 200,
    description: 'Disable 2FA',
  })
  @HttpCode(HttpStatus.OK)
  async disableTwoFA(
    @CurrentUser() currentUser: AuthenticatedUser,
    @Fingerprint() fingerprint: FingerprintObj,
    @Res() res: Response,
  ): Promise<Response<{ message: string }>> {
    const { message, cookieToken } = await this.twoFAService.disable2FA(currentUser.id, fingerprint);
    return res
      .status(HttpStatus.NO_CONTENT)
      .cookie('token', cookieToken, this.authService.getCookieOptions())
      .json({ message });
  }
  @Get('/send-email')
  @ApiOperation({ summary: 'Send OTP code to user email' })
  @ApiResponse({
    status: 200,
    description: 'Send OTP code to user email',
  })
  @HttpCode(HttpStatus.OK)
  async sendOTPCodeToEmail(@CurrentUser() currentUser: AuthenticatedUser): Promise<{ message: string | null }> {
    const message = await this.twoFAService.sendOTPCodeToEmail(currentUser.id);
    return { message };
  }
}
